name: "Solana Local Validator"
author: "Switchboard Labs"
description:
  "Start a localnet Solana validator with a specific feature set enabled."
branding:
  color: purple
  icon: activity
inputs:
  cluster:
    type: choice
    description: "the cluster to match a feature set for"
    required: false
    default: "local"
    options:
      - "all"
      - "local"
      - "devnet"
      - "testnet"
      - "mainnet"
  rust-version:
    description: ""
    required: false
    default: "stable"
  solana-version:
    description: "the Solana version to install"
    required: false
    default: "stable"
  anchor-version:
    description:
      "the Anchor version to install. if blank then dont install anchor"
    required: false
    default: ""
  args:
    description: "solana-test-validator arguements"
    required: false
    default: ""
  quiet:
    type: boolean
    description: "suppress solana-test-validator stdout"
    required: false
    default: true
runs:
  using: "composite"
  steps:
    # Install Linux Compilers
    - name: Install Linux Deps
      shell: bash
      run:
        sudo apt-get update && sudo apt-get install -y pkg-config
        build-essential libudev-dev

    # Install Rust Toolchain
    - name: Install Rust Stable
      id: rust_toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ inputs.rust-version }}
        override: true
        profile: minimal
        components: rustfmt, clippy
    - name: Add Cargo bin to Path
      shell: bash
      run: |
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Verify Rust install
      shell: bash
      run: |
        echo "Verifying rust '${{ inputs.toolchain }}' ..."
        rustc --version
        cargo --version
        cargo clippy --version
        rustfmt --version
    - name: Share rustc hash
      shell: bash
      run: |
        echo 'RUSTC_HASH=${{ steps.rust_toolchain.outputs.rustc_hash }}' >> $GITHUB_ENV

    # Check Solana channels versions
    - name: Determine Solana CLI version
      id: solana-channel-version
      shell: bash
      run: |
        chmod +x ./.github/solana_local_validator/scripts/channel-info.sh
        output=$(./.github/solana_local_validator/scripts/channel-info.sh)
        read -r BETA_CHANNEL_LATEST_TAG STABLE_CHANNEL_LATEST_TAG <<< "$output"
        echo "BETA_CHANNEL_LATEST_TAG=$BETA_CHANNEL_LATEST_TAG" >> $GITHUB_ENV
        echo "STABLE_CHANNEL_LATEST_TAG=$STABLE_CHANNEL_LATEST_TAG" >> $GITHUB_ENV 

    # Install Solana Toolchain
    - name: Cache Solana Install
      id: cache-solana-install
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/solana/
          ~/.local/share/solana/
        key: ${{ runner.os }}-Solana-${{ inputs.solana-version == 'stable' && env.STABLE_CHANNEL_LATEST_TAG || inputs.solana-version == 'beta' && env.BETA_CHANNEL_LATEST_TAG || inputs.solana-version }}
    - name: Install Solana
      shell: bash
      if: steps.cache-solana-install.outputs.cache-hit != 'true'
      run:
        sh -c "$(curl -sSfL https://release.anza.xyz/${{
        inputs.solana-version}}/install)"
    - name: Add Solana bin to Path
      shell: bash
      run: |
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
    - name: Verify Solana install
      shell: bash
      run: |
        solana --version

    - name: Verify solana-test-validator binary exists
      shell: bash
      run: |
        echo "=== Checking for solana-test-validator ==="
        if command -v solana-test-validator; then
          echo "✓ Binary found"
          which solana-test-validator
          ls -lh $(which solana-test-validator)
        else
          echo "✗ solana-test-validator NOT FOUND in PATH"
          echo "Contents of bin directory:"
          ls -lh $HOME/.local/share/solana/install/active_release/bin/ | grep -E "(test|validator)" || echo "No test/validator binaries found"
          exit 1
        fi

    # Install Solana Cluster Feature Set Diff
    - name: Cache SCFSD Install
      id: cache-scfsd-cli
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/scfsd
        key: scfsd-cli-${{ runner.os }}-9f742d455586a3cae2a31b85d0bb1c8709c143ab
    - name: Cargo Install SCFSD
      shell: bash
      if: steps.cache-scfsd-cli.outputs.cache-hit != 'true'
      run:
        cargo install --git https://github.com/FrankC01/solana-gadgets --rev
        9f742d455586a3cae2a31b85d0bb1c8709c143ab scfsd
    - name: Verify SCFSD Install
      shell: bash
      run: |
        scfsd --version

    # Install Anchor
    - name: Setup Anchor Cache
      uses: actions/cache@v3
      id: cache-anchor-cli
      if: inputs.anchor-version != ''
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          ./target/
        key: anchor-cli-${{ runner.os }}-${{ inputs.anchor-version }}
    - name: Install Anchor
      shell: bash
      if:
        inputs.anchor-version != '' && steps.cache-anchor-cli.outputs.cache-hit
        != 'true'
      run:
        cargo install --git https://github.com/coral-xyz/anchor --tag
        "${{inputs.anchor-version }}" anchor-cli --locked
    - name: Verify Anchor install
      shell: bash
      if: inputs.anchor-version != ''
      run: anchor --version

    # Setup Keypair
    - name: Find or Create Keypair
      shell: bash
      run: |
        find ~/.config/solana/id.json || solana-keygen new -s --no-bip39-passphrase
        echo "DEFAULT_SOLANA_PUBLIC_KEY=$(solana-keygen pubkey ~/.config/solana/id.json)" >> $GITHUB_ENV

    # Setup Local Validator Config
    - name: Optional Quiet Flag
      shell: bash
      run:
        echo "SOLANA_QUIET_FLAG=$(${{ inputs.quiet }} && echo -q )" >>
        $GITHUB_ENV
    - name: Get Cluster Feature Set
      shell: bash
      run:
        echo "SOLANA_FEATURES=$(scfsd -c ${{ inputs.cluster }} -k -t )" >>
        $GITHUB_ENV

    # Run
    - name: Start Local Validator
      shell: bash
      run: |
        # Start validator and capture PID
        solana-test-validator ${{ env.SOLANA_QUIET_FLAG }} -r --bind-address 0.0.0.0 --rpc-port 8899 ${{ env.SOLANA_FEATURES }} ${{ inputs.args }} > /tmp/validator.log 2>&1 &
        VALIDATOR_PID=$!
        echo "Validator PID: $VALIDATOR_PID"

        # Wait for validator to be ready
        SUCCESS=false
        for attempt in {1..30}; do
          sleep 1

          # Check if process still running
          if ! kill -0 $VALIDATOR_PID 2>/dev/null; then
            echo "ERROR: Validator process died!"
            echo "Last 50 lines of validator log:"
            tail -50 /tmp/validator.log
            exit 1
          fi

          # Check if RPC is responding
          if curl -sS http://localhost:8899 -X POST -H 'Content-Type: application/json' -d '{"jsonrpc":"2.0","id":1, "method":"getBlockHeight"}' > /dev/null 2>&1; then
            echo "Validator ready after $attempt seconds"
            SUCCESS=true
            break
          fi

          echo "Waiting for validator... (attempt $attempt/30)"
        done

        # Fail if validator never became ready
        if [ "$SUCCESS" = false ]; then
          echo "ERROR: Validator failed to become ready after 30 seconds"
          echo "Last 100 lines of validator log:"
          tail -100 /tmp/validator.log
          kill $VALIDATOR_PID 2>/dev/null || true
          exit 1
        fi